// Code generated by protoc-gen-go. DO NOT EDIT.
// source: aviary.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	aviary.proto

It has these top-level messages:
	SessionToken
	GetLoggedInUserRequest
	GetLoggedInUserResponse
	CreateDeviceRequest
	CreateDeviceResponse
	GetDevicesRequest
	GetDevicesResponse
	GetDeviceRequest
	GetDeviceResponse
	UpdateDeviceRequest
	UpdateDeviceResponse
	DeleteDeviceRequest
	DeleteDeviceResponse
	GetDatapointsRequest
	GetDatapointsResponse
	StreamDatapointsRequest
	StreamDatapointsResponse
	Device
	LoRaDeviceConfig
	Datapoint
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf2 "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type LoRaDeviceType int32

const (
	LoRaDeviceType_None LoRaDeviceType = 0
	LoRaDeviceType_ABP  LoRaDeviceType = 1
	LoRaDeviceType_OTAA LoRaDeviceType = 2
)

var LoRaDeviceType_name = map[int32]string{
	0: "None",
	1: "ABP",
	2: "OTAA",
}
var LoRaDeviceType_value = map[string]int32{
	"None": 0,
	"ABP":  1,
	"OTAA": 2,
}

func (x LoRaDeviceType) String() string {
	return proto1.EnumName(LoRaDeviceType_name, int32(x))
}
func (LoRaDeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SessionToken struct {
	Claims *SessionToken_Claims `protobuf:"bytes,1,opt,name=claims" json:"claims,omitempty"`
	Mac    []byte               `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (m *SessionToken) Reset()                    { *m = SessionToken{} }
func (m *SessionToken) String() string            { return proto1.CompactTextString(m) }
func (*SessionToken) ProtoMessage()               {}
func (*SessionToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SessionToken) GetClaims() *SessionToken_Claims {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *SessionToken) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

type SessionToken_Claims struct {
	Created *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=created" json:"created,omitempty"`
	UserId  int64                       `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *SessionToken_Claims) Reset()                    { *m = SessionToken_Claims{} }
func (m *SessionToken_Claims) String() string            { return proto1.CompactTextString(m) }
func (*SessionToken_Claims) ProtoMessage()               {}
func (*SessionToken_Claims) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *SessionToken_Claims) GetCreated() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *SessionToken_Claims) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetLoggedInUserRequest struct {
}

func (m *GetLoggedInUserRequest) Reset()                    { *m = GetLoggedInUserRequest{} }
func (m *GetLoggedInUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetLoggedInUserRequest) ProtoMessage()               {}
func (*GetLoggedInUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetLoggedInUserResponse struct {
}

func (m *GetLoggedInUserResponse) Reset()                    { *m = GetLoggedInUserResponse{} }
func (m *GetLoggedInUserResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetLoggedInUserResponse) ProtoMessage()               {}
func (*GetLoggedInUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CreateDeviceRequest struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *CreateDeviceRequest) Reset()                    { *m = CreateDeviceRequest{} }
func (m *CreateDeviceRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateDeviceRequest) ProtoMessage()               {}
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateDeviceRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type CreateDeviceResponse struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *CreateDeviceResponse) Reset()                    { *m = CreateDeviceResponse{} }
func (m *CreateDeviceResponse) String() string            { return proto1.CompactTextString(m) }
func (*CreateDeviceResponse) ProtoMessage()               {}
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateDeviceResponse) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type GetDevicesRequest struct {
}

func (m *GetDevicesRequest) Reset()                    { *m = GetDevicesRequest{} }
func (m *GetDevicesRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetDevicesRequest) ProtoMessage()               {}
func (*GetDevicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type GetDevicesResponse struct {
	Devices []*Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
}

func (m *GetDevicesResponse) Reset()                    { *m = GetDevicesResponse{} }
func (m *GetDevicesResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetDevicesResponse) ProtoMessage()               {}
func (*GetDevicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetDevicesResponse) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

type GetDeviceRequest struct {
	Eui string `protobuf:"bytes,1,opt,name=eui" json:"eui,omitempty"`
}

func (m *GetDeviceRequest) Reset()                    { *m = GetDeviceRequest{} }
func (m *GetDeviceRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetDeviceRequest) ProtoMessage()               {}
func (*GetDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetDeviceRequest) GetEui() string {
	if m != nil {
		return m.Eui
	}
	return ""
}

type GetDeviceResponse struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *GetDeviceResponse) Reset()                    { *m = GetDeviceResponse{} }
func (m *GetDeviceResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetDeviceResponse) ProtoMessage()               {}
func (*GetDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetDeviceResponse) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type UpdateDeviceRequest struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *UpdateDeviceRequest) Reset()                    { *m = UpdateDeviceRequest{} }
func (m *UpdateDeviceRequest) String() string            { return proto1.CompactTextString(m) }
func (*UpdateDeviceRequest) ProtoMessage()               {}
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateDeviceRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type UpdateDeviceResponse struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *UpdateDeviceResponse) Reset()                    { *m = UpdateDeviceResponse{} }
func (m *UpdateDeviceResponse) String() string            { return proto1.CompactTextString(m) }
func (*UpdateDeviceResponse) ProtoMessage()               {}
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateDeviceResponse) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type DeleteDeviceRequest struct {
	Eui string `protobuf:"bytes,1,opt,name=eui" json:"eui,omitempty"`
}

func (m *DeleteDeviceRequest) Reset()                    { *m = DeleteDeviceRequest{} }
func (m *DeleteDeviceRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeleteDeviceRequest) ProtoMessage()               {}
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeleteDeviceRequest) GetEui() string {
	if m != nil {
		return m.Eui
	}
	return ""
}

type DeleteDeviceResponse struct {
}

func (m *DeleteDeviceResponse) Reset()                    { *m = DeleteDeviceResponse{} }
func (m *DeleteDeviceResponse) String() string            { return proto1.CompactTextString(m) }
func (*DeleteDeviceResponse) ProtoMessage()               {}
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type GetDatapointsRequest struct {
	Eui   string                      `protobuf:"bytes,1,opt,name=eui" json:"eui,omitempty"`
	Since *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=since" json:"since,omitempty"`
	Until *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=until" json:"until,omitempty"`
}

func (m *GetDatapointsRequest) Reset()                    { *m = GetDatapointsRequest{} }
func (m *GetDatapointsRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetDatapointsRequest) ProtoMessage()               {}
func (*GetDatapointsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetDatapointsRequest) GetEui() string {
	if m != nil {
		return m.Eui
	}
	return ""
}

func (m *GetDatapointsRequest) GetSince() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Since
	}
	return nil
}

func (m *GetDatapointsRequest) GetUntil() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Until
	}
	return nil
}

type GetDatapointsResponse struct {
	Datapoints []*Datapoint `protobuf:"bytes,1,rep,name=datapoints" json:"datapoints,omitempty"`
}

func (m *GetDatapointsResponse) Reset()                    { *m = GetDatapointsResponse{} }
func (m *GetDatapointsResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetDatapointsResponse) ProtoMessage()               {}
func (*GetDatapointsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetDatapointsResponse) GetDatapoints() []*Datapoint {
	if m != nil {
		return m.Datapoints
	}
	return nil
}

type StreamDatapointsRequest struct {
	DeviceEui string `protobuf:"bytes,1,opt,name=device_eui,json=deviceEui" json:"device_eui,omitempty"`
}

func (m *StreamDatapointsRequest) Reset()                    { *m = StreamDatapointsRequest{} }
func (m *StreamDatapointsRequest) String() string            { return proto1.CompactTextString(m) }
func (*StreamDatapointsRequest) ProtoMessage()               {}
func (*StreamDatapointsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *StreamDatapointsRequest) GetDeviceEui() string {
	if m != nil {
		return m.DeviceEui
	}
	return ""
}

type StreamDatapointsResponse struct {
	Datapoint *Datapoint `protobuf:"bytes,1,opt,name=datapoint" json:"datapoint,omitempty"`
}

func (m *StreamDatapointsResponse) Reset()                    { *m = StreamDatapointsResponse{} }
func (m *StreamDatapointsResponse) String() string            { return proto1.CompactTextString(m) }
func (*StreamDatapointsResponse) ProtoMessage()               {}
func (*StreamDatapointsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *StreamDatapointsResponse) GetDatapoint() *Datapoint {
	if m != nil {
		return m.Datapoint
	}
	return nil
}

type Device struct {
	Eui                string                        `protobuf:"bytes,1,opt,name=eui" json:"eui,omitempty"`
	Name               string                        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Latitude           *google_protobuf2.DoubleValue `protobuf:"bytes,3,opt,name=latitude" json:"latitude,omitempty"`
	Longitude          *google_protobuf2.DoubleValue `protobuf:"bytes,4,opt,name=longitude" json:"longitude,omitempty"`
	ConnectivityType   string                        `protobuf:"bytes,5,opt,name=connectivity_type,json=connectivityType" json:"connectivity_type,omitempty"`
	ConnectivityConfig *google_protobuf.Any          `protobuf:"bytes,6,opt,name=connectivity_config,json=connectivityConfig" json:"connectivity_config,omitempty"`
	LastHeardFrom      *google_protobuf1.Timestamp   `protobuf:"bytes,7,opt,name=last_heard_from,json=lastHeardFrom" json:"last_heard_from,omitempty"`
	FirmwareVersion    string                        `protobuf:"bytes,8,opt,name=firmware_version,json=firmwareVersion" json:"firmware_version,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto1.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Device) GetEui() string {
	if m != nil {
		return m.Eui
	}
	return ""
}

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetLatitude() *google_protobuf2.DoubleValue {
	if m != nil {
		return m.Latitude
	}
	return nil
}

func (m *Device) GetLongitude() *google_protobuf2.DoubleValue {
	if m != nil {
		return m.Longitude
	}
	return nil
}

func (m *Device) GetConnectivityType() string {
	if m != nil {
		return m.ConnectivityType
	}
	return ""
}

func (m *Device) GetConnectivityConfig() *google_protobuf.Any {
	if m != nil {
		return m.ConnectivityConfig
	}
	return nil
}

func (m *Device) GetLastHeardFrom() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LastHeardFrom
	}
	return nil
}

func (m *Device) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

type LoRaDeviceConfig struct {
	Eui                   string         `protobuf:"bytes,1,opt,name=eui" json:"eui,omitempty"`
	DeviceType            LoRaDeviceType `protobuf:"varint,2,opt,name=device_type,json=deviceType,enum=aviary.LoRaDeviceType" json:"device_type,omitempty"`
	ApplicationEui        string         `protobuf:"bytes,3,opt,name=application_eui,json=applicationEui" json:"application_eui,omitempty"`
	ApplicationKey        string         `protobuf:"bytes,4,opt,name=application_key,json=applicationKey" json:"application_key,omitempty"`
	DeviceAddress         string         `protobuf:"bytes,5,opt,name=device_address,json=deviceAddress" json:"device_address,omitempty"`
	ApplicationSessionKey string         `protobuf:"bytes,6,opt,name=application_session_key,json=applicationSessionKey" json:"application_session_key,omitempty"`
	NetworkSessionKey     string         `protobuf:"bytes,7,opt,name=network_session_key,json=networkSessionKey" json:"network_session_key,omitempty"`
	RelaxedCounter        bool           `protobuf:"varint,8,opt,name=relaxed_counter,json=relaxedCounter" json:"relaxed_counter,omitempty"`
}

func (m *LoRaDeviceConfig) Reset()                    { *m = LoRaDeviceConfig{} }
func (m *LoRaDeviceConfig) String() string            { return proto1.CompactTextString(m) }
func (*LoRaDeviceConfig) ProtoMessage()               {}
func (*LoRaDeviceConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *LoRaDeviceConfig) GetEui() string {
	if m != nil {
		return m.Eui
	}
	return ""
}

func (m *LoRaDeviceConfig) GetDeviceType() LoRaDeviceType {
	if m != nil {
		return m.DeviceType
	}
	return LoRaDeviceType_None
}

func (m *LoRaDeviceConfig) GetApplicationEui() string {
	if m != nil {
		return m.ApplicationEui
	}
	return ""
}

func (m *LoRaDeviceConfig) GetApplicationKey() string {
	if m != nil {
		return m.ApplicationKey
	}
	return ""
}

func (m *LoRaDeviceConfig) GetDeviceAddress() string {
	if m != nil {
		return m.DeviceAddress
	}
	return ""
}

func (m *LoRaDeviceConfig) GetApplicationSessionKey() string {
	if m != nil {
		return m.ApplicationSessionKey
	}
	return ""
}

func (m *LoRaDeviceConfig) GetNetworkSessionKey() string {
	if m != nil {
		return m.NetworkSessionKey
	}
	return ""
}

func (m *LoRaDeviceConfig) GetRelaxedCounter() bool {
	if m != nil {
		return m.RelaxedCounter
	}
	return false
}

type Datapoint struct {
	Id        int64                       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DeviceEui string                      `protobuf:"bytes,2,opt,name=device_eui,json=deviceEui" json:"device_eui,omitempty"`
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     *google_protobuf.Any        `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (m *Datapoint) Reset()                    { *m = Datapoint{} }
func (m *Datapoint) String() string            { return proto1.CompactTextString(m) }
func (*Datapoint) ProtoMessage()               {}
func (*Datapoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Datapoint) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Datapoint) GetDeviceEui() string {
	if m != nil {
		return m.DeviceEui
	}
	return ""
}

func (m *Datapoint) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Datapoint) GetValue() *google_protobuf.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto1.RegisterType((*SessionToken)(nil), "aviary.SessionToken")
	proto1.RegisterType((*SessionToken_Claims)(nil), "aviary.SessionToken.Claims")
	proto1.RegisterType((*GetLoggedInUserRequest)(nil), "aviary.GetLoggedInUserRequest")
	proto1.RegisterType((*GetLoggedInUserResponse)(nil), "aviary.GetLoggedInUserResponse")
	proto1.RegisterType((*CreateDeviceRequest)(nil), "aviary.CreateDeviceRequest")
	proto1.RegisterType((*CreateDeviceResponse)(nil), "aviary.CreateDeviceResponse")
	proto1.RegisterType((*GetDevicesRequest)(nil), "aviary.GetDevicesRequest")
	proto1.RegisterType((*GetDevicesResponse)(nil), "aviary.GetDevicesResponse")
	proto1.RegisterType((*GetDeviceRequest)(nil), "aviary.GetDeviceRequest")
	proto1.RegisterType((*GetDeviceResponse)(nil), "aviary.GetDeviceResponse")
	proto1.RegisterType((*UpdateDeviceRequest)(nil), "aviary.UpdateDeviceRequest")
	proto1.RegisterType((*UpdateDeviceResponse)(nil), "aviary.UpdateDeviceResponse")
	proto1.RegisterType((*DeleteDeviceRequest)(nil), "aviary.DeleteDeviceRequest")
	proto1.RegisterType((*DeleteDeviceResponse)(nil), "aviary.DeleteDeviceResponse")
	proto1.RegisterType((*GetDatapointsRequest)(nil), "aviary.GetDatapointsRequest")
	proto1.RegisterType((*GetDatapointsResponse)(nil), "aviary.GetDatapointsResponse")
	proto1.RegisterType((*StreamDatapointsRequest)(nil), "aviary.StreamDatapointsRequest")
	proto1.RegisterType((*StreamDatapointsResponse)(nil), "aviary.StreamDatapointsResponse")
	proto1.RegisterType((*Device)(nil), "aviary.Device")
	proto1.RegisterType((*LoRaDeviceConfig)(nil), "aviary.LoRaDeviceConfig")
	proto1.RegisterType((*Datapoint)(nil), "aviary.Datapoint")
	proto1.RegisterEnum("aviary.LoRaDeviceType", LoRaDeviceType_name, LoRaDeviceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Aviary service

type AviaryClient interface {
	GetLoggedInUser(ctx context.Context, in *GetLoggedInUserRequest, opts ...grpc.CallOption) (*GetLoggedInUserResponse, error)
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	GetDatapoints(ctx context.Context, in *GetDatapointsRequest, opts ...grpc.CallOption) (*GetDatapointsResponse, error)
	// StreamDatapoints streams datapoints for the given device EUI; or if no EUI is given, for all the user's devices.
	StreamDatapoints(ctx context.Context, in *StreamDatapointsRequest, opts ...grpc.CallOption) (Aviary_StreamDatapointsClient, error)
}

type aviaryClient struct {
	cc *grpc.ClientConn
}

func NewAviaryClient(cc *grpc.ClientConn) AviaryClient {
	return &aviaryClient{cc}
}

func (c *aviaryClient) GetLoggedInUser(ctx context.Context, in *GetLoggedInUserRequest, opts ...grpc.CallOption) (*GetLoggedInUserResponse, error) {
	out := new(GetLoggedInUserResponse)
	err := grpc.Invoke(ctx, "/aviary.Aviary/GetLoggedInUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviaryClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := grpc.Invoke(ctx, "/aviary.Aviary/CreateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviaryClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesResponse, error) {
	out := new(GetDevicesResponse)
	err := grpc.Invoke(ctx, "/aviary.Aviary/GetDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviaryClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := grpc.Invoke(ctx, "/aviary.Aviary/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviaryClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := grpc.Invoke(ctx, "/aviary.Aviary/UpdateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviaryClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	out := new(DeleteDeviceResponse)
	err := grpc.Invoke(ctx, "/aviary.Aviary/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviaryClient) GetDatapoints(ctx context.Context, in *GetDatapointsRequest, opts ...grpc.CallOption) (*GetDatapointsResponse, error) {
	out := new(GetDatapointsResponse)
	err := grpc.Invoke(ctx, "/aviary.Aviary/GetDatapoints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviaryClient) StreamDatapoints(ctx context.Context, in *StreamDatapointsRequest, opts ...grpc.CallOption) (Aviary_StreamDatapointsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Aviary_serviceDesc.Streams[0], c.cc, "/aviary.Aviary/StreamDatapoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &aviaryStreamDatapointsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Aviary_StreamDatapointsClient interface {
	Recv() (*StreamDatapointsResponse, error)
	grpc.ClientStream
}

type aviaryStreamDatapointsClient struct {
	grpc.ClientStream
}

func (x *aviaryStreamDatapointsClient) Recv() (*StreamDatapointsResponse, error) {
	m := new(StreamDatapointsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Aviary service

type AviaryServer interface {
	GetLoggedInUser(context.Context, *GetLoggedInUserRequest) (*GetLoggedInUserResponse, error)
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	GetDevices(context.Context, *GetDevicesRequest) (*GetDevicesResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	GetDatapoints(context.Context, *GetDatapointsRequest) (*GetDatapointsResponse, error)
	// StreamDatapoints streams datapoints for the given device EUI; or if no EUI is given, for all the user's devices.
	StreamDatapoints(*StreamDatapointsRequest, Aviary_StreamDatapointsServer) error
}

func RegisterAviaryServer(s *grpc.Server, srv AviaryServer) {
	s.RegisterService(&_Aviary_serviceDesc, srv)
}

func _Aviary_GetLoggedInUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoggedInUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviaryServer).GetLoggedInUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aviary.Aviary/GetLoggedInUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviaryServer).GetLoggedInUser(ctx, req.(*GetLoggedInUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviary_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviaryServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aviary.Aviary/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviaryServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviary_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviaryServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aviary.Aviary/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviaryServer).GetDevices(ctx, req.(*GetDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviary_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviaryServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aviary.Aviary/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviaryServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviary_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviaryServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aviary.Aviary/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviaryServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviary_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviaryServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aviary.Aviary/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviaryServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviary_GetDatapoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatapointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviaryServer).GetDatapoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aviary.Aviary/GetDatapoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviaryServer).GetDatapoints(ctx, req.(*GetDatapointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviary_StreamDatapoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDatapointsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AviaryServer).StreamDatapoints(m, &aviaryStreamDatapointsServer{stream})
}

type Aviary_StreamDatapointsServer interface {
	Send(*StreamDatapointsResponse) error
	grpc.ServerStream
}

type aviaryStreamDatapointsServer struct {
	grpc.ServerStream
}

func (x *aviaryStreamDatapointsServer) Send(m *StreamDatapointsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Aviary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aviary.Aviary",
	HandlerType: (*AviaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoggedInUser",
			Handler:    _Aviary_GetLoggedInUser_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _Aviary_CreateDevice_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _Aviary_GetDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _Aviary_GetDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _Aviary_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _Aviary_DeleteDevice_Handler,
		},
		{
			MethodName: "GetDatapoints",
			Handler:    _Aviary_GetDatapoints_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDatapoints",
			Handler:       _Aviary_StreamDatapoints_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aviary.proto",
}

func init() { proto1.RegisterFile("aviary.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1025 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0x8e, 0xed, 0xc4, 0x8e, 0x4f, 0x12, 0xc7, 0x59, 0xa7, 0x89, 0x23, 0xd2, 0x36, 0xa3, 0x01,
	0x12, 0xca, 0xe0, 0x94, 0x94, 0x81, 0x0c, 0x4c, 0x3b, 0xe3, 0xfc, 0x50, 0x4a, 0x3a, 0xa5, 0xa3,
	0xa6, 0x65, 0xb8, 0xf2, 0x6c, 0xa5, 0x13, 0xb3, 0x13, 0x49, 0x2b, 0xa4, 0x55, 0x82, 0x9f, 0x80,
	0x1b, 0x1e, 0x82, 0x27, 0xe0, 0xb5, 0x78, 0x08, 0x6e, 0x18, 0xed, 0xae, 0x7e, 0x2c, 0x2b, 0x34,
	0x9d, 0xde, 0xc9, 0xe7, 0x7c, 0xdf, 0xb7, 0x67, 0xcf, 0x39, 0xd2, 0x67, 0x58, 0xa6, 0x57, 0x8c,
	0x86, 0x93, 0x41, 0x10, 0x72, 0xc1, 0x49, 0x53, 0xfd, 0x32, 0xb6, 0xc6, 0x9c, 0x8f, 0x5d, 0xdc,
	0x97, 0xd1, 0xb7, 0xf1, 0xc5, 0x3e, 0xf5, 0x35, 0xc4, 0xb8, 0x5f, 0x4e, 0x09, 0xe6, 0x61, 0x24,
	0xa8, 0x17, 0x68, 0xc0, 0xbd, 0x32, 0xe0, 0x3a, 0xa4, 0x41, 0x80, 0x61, 0xa4, 0xf2, 0xe6, 0xdf,
	0x35, 0x58, 0x7e, 0x85, 0x51, 0xc4, 0xb8, 0x7f, 0xce, 0x2f, 0xd1, 0x27, 0x8f, 0xa0, 0x69, 0xbb,
	0x94, 0x79, 0x51, 0xbf, 0xb6, 0x53, 0xdb, 0x5b, 0x3a, 0xf8, 0x68, 0xa0, 0x6b, 0x2a, 0xa2, 0x06,
	0xc7, 0x12, 0x62, 0x69, 0x28, 0xe9, 0x42, 0xc3, 0xa3, 0x76, 0xbf, 0xbe, 0x53, 0xdb, 0x5b, 0xb6,
	0x92, 0x47, 0xe3, 0x67, 0x68, 0x2a, 0x0c, 0xf9, 0x0a, 0x5a, 0x76, 0x88, 0x54, 0xa0, 0xa3, 0x15,
	0x8d, 0x81, 0xaa, 0x69, 0x90, 0xd6, 0x34, 0x38, 0x4f, 0x8b, 0xb6, 0x52, 0x28, 0xd9, 0x84, 0x56,
	0x1c, 0x61, 0x38, 0x62, 0x8e, 0x54, 0x6d, 0x58, 0xcd, 0xe4, 0xe7, 0x33, 0xc7, 0xec, 0xc3, 0xc6,
	0x53, 0x14, 0xcf, 0xf9, 0x78, 0x8c, 0xce, 0x33, 0xff, 0x75, 0x84, 0xa1, 0x85, 0xbf, 0xc5, 0x18,
	0x09, 0x73, 0x0b, 0x36, 0x67, 0x32, 0x51, 0xc0, 0xfd, 0x08, 0xcd, 0xc7, 0xd0, 0x3b, 0x96, 0xc2,
	0x27, 0x78, 0xc5, 0x6c, 0xd4, 0x0c, 0xf2, 0x29, 0x34, 0x1d, 0x19, 0xd0, 0x95, 0x75, 0xd2, 0xbb,
	0x6a, 0x98, 0xce, 0x9a, 0x4f, 0x60, 0x7d, 0x9a, 0xae, 0x64, 0x6f, 0xcd, 0xef, 0xc1, 0xda, 0x53,
	0x14, 0x2a, 0x18, 0xa5, 0xe5, 0x3e, 0x01, 0x52, 0x0c, 0x6a, 0xc9, 0x3d, 0x68, 0x29, 0x52, 0xd2,
	0xff, 0x46, 0x85, 0x66, 0x9a, 0x36, 0x3f, 0x86, 0x6e, 0xc6, 0x4f, 0x2f, 0xd4, 0x85, 0x06, 0xc6,
	0x4c, 0x56, 0xd3, 0xb6, 0x92, 0x47, 0xf3, 0xbb, 0xc2, 0xd1, 0xef, 0x5d, 0xf7, 0x63, 0xe8, 0xbd,
	0x0e, 0x9c, 0x0f, 0x69, 0xdb, 0x34, 0xfd, 0x3d, 0x8f, 0xdf, 0x85, 0xde, 0x09, 0xba, 0x58, 0x3e,
	0x7e, 0xf6, 0x92, 0x1b, 0xb0, 0x3e, 0x0d, 0xd4, 0x63, 0xff, 0xb3, 0x06, 0xeb, 0xc9, 0xed, 0xa9,
	0xa0, 0x01, 0x67, 0xbe, 0x88, 0x6e, 0x94, 0x20, 0x0f, 0x61, 0x21, 0x62, 0xbe, 0x8d, 0x72, 0xdb,
	0xfe, 0x7f, 0x47, 0x15, 0x30, 0x61, 0xc4, 0xbe, 0x60, 0x6e, 0xbf, 0xf1, 0x6e, 0x86, 0x04, 0x9a,
	0x3f, 0xc2, 0x9d, 0x52, 0x35, 0xba, 0x21, 0x5f, 0x02, 0x38, 0x59, 0x54, 0xcf, 0x7d, 0x2d, 0x6b,
	0x4a, 0x9a, 0xb1, 0x0a, 0x20, 0xf3, 0x10, 0x36, 0x5f, 0x89, 0x10, 0xa9, 0x37, 0x7b, 0xb9, 0xbb,
	0x00, 0xaa, 0x81, 0xa3, 0xfc, 0x8e, 0x6d, 0x15, 0x39, 0x8d, 0x99, 0x79, 0x06, 0xfd, 0x59, 0xa6,
	0x2e, 0x64, 0x1f, 0xda, 0xd9, 0x19, 0x7a, 0x38, 0x15, 0x75, 0xe4, 0x18, 0xf3, 0x8f, 0x06, 0x34,
	0x55, 0xd3, 0x2b, 0x7a, 0x4a, 0x60, 0xde, 0xa7, 0x9e, 0x6a, 0x69, 0xdb, 0x92, 0xcf, 0xe4, 0x10,
	0x16, 0x5d, 0x2a, 0x98, 0x88, 0x1d, 0xd4, 0x8d, 0xdb, 0x9e, 0x69, 0xdc, 0x09, 0x8f, 0xdf, 0xba,
	0xf8, 0x86, 0xba, 0x31, 0x5a, 0x19, 0x9a, 0x7c, 0x0b, 0x6d, 0x97, 0xfb, 0x63, 0x45, 0x9d, 0xbf,
	0x05, 0x35, 0x87, 0x93, 0xcf, 0x61, 0xcd, 0xe6, 0xbe, 0x8f, 0xb6, 0x60, 0x57, 0x4c, 0x4c, 0x46,
	0x62, 0x12, 0x60, 0x7f, 0x41, 0x96, 0xd5, 0x2d, 0x26, 0xce, 0x27, 0x01, 0x92, 0x53, 0xe8, 0x4d,
	0x81, 0x6d, 0xee, 0x5f, 0xb0, 0x71, 0xbf, 0x29, 0x8f, 0x5c, 0x9f, 0x39, 0x72, 0xe8, 0x4f, 0x2c,
	0x52, 0x24, 0x1c, 0x4b, 0x3c, 0x39, 0x82, 0x55, 0x97, 0x46, 0x62, 0xf4, 0x2b, 0xd2, 0xd0, 0x19,
	0x5d, 0x84, 0xdc, 0xeb, 0xb7, 0xde, 0xb9, 0x29, 0x2b, 0x09, 0xe5, 0x87, 0x84, 0xf1, 0x7d, 0xc8,
	0x3d, 0xf2, 0x19, 0x74, 0x2f, 0x58, 0xe8, 0x5d, 0xd3, 0x10, 0x47, 0x57, 0x18, 0x26, 0xdf, 0xdf,
	0xfe, 0xa2, 0x2c, 0x7b, 0x35, 0x8d, 0xbf, 0x51, 0x61, 0xf3, 0x9f, 0x3a, 0x74, 0x9f, 0x73, 0x8b,
	0xaa, 0x69, 0xe8, 0x1a, 0x66, 0x67, 0xf2, 0x0d, 0x2c, 0xe9, 0xe5, 0x90, 0x3d, 0x48, 0x46, 0xd3,
	0x39, 0xd8, 0x48, 0x67, 0x9c, 0x0b, 0x24, 0x9d, 0xb0, 0xf4, 0x1e, 0xc9, 0xae, 0xec, 0xc2, 0x2a,
	0x0d, 0x02, 0x97, 0xd9, 0x54, 0x30, 0xee, 0xcb, 0xd5, 0x6a, 0x48, 0xd9, 0x4e, 0x21, 0x7c, 0x1a,
	0xb3, 0x32, 0xf0, 0x12, 0x27, 0x72, 0x5a, 0xd3, 0xc0, 0x33, 0x9c, 0x90, 0x4f, 0xa0, 0xa3, 0x4b,
	0xa1, 0x8e, 0x13, 0x62, 0x14, 0xe9, 0x89, 0xac, 0xa8, 0xe8, 0x50, 0x05, 0xc9, 0xd7, 0xb0, 0x59,
	0xd4, 0x8b, 0x94, 0x0d, 0x49, 0xdd, 0xa6, 0xc4, 0xdf, 0x29, 0xa4, 0xb5, 0x49, 0x25, 0xf2, 0x03,
	0xe8, 0xf9, 0x28, 0xae, 0x79, 0x78, 0x39, 0xc5, 0x69, 0x49, 0xce, 0x9a, 0x4e, 0x15, 0xf0, 0xbb,
	0xb0, 0x1a, 0xa2, 0x4b, 0x7f, 0x47, 0x67, 0x64, 0xf3, 0xd8, 0x17, 0x18, 0xca, 0x56, 0x2f, 0x5a,
	0x1d, 0x1d, 0x3e, 0x56, 0x51, 0xf3, 0xaf, 0x1a, 0xb4, 0xb3, 0x97, 0x81, 0x74, 0xa0, 0xce, 0x94,
	0xb3, 0x35, 0xac, 0x3a, 0x73, 0x4a, 0x6f, 0x5f, 0xbd, 0xf4, 0xf6, 0x91, 0x43, 0x68, 0x67, 0x16,
	0x7d, 0x8b, 0x2f, 0x47, 0x0e, 0x26, 0x0f, 0x60, 0xe1, 0x2a, 0xd9, 0x6b, 0xbd, 0xfb, 0xd5, 0x8b,
	0xa8, 0x20, 0x0f, 0xbe, 0x80, 0xce, 0xf4, 0x28, 0xc9, 0x22, 0xcc, 0xbf, 0xe0, 0x3e, 0x76, 0xe7,
	0x48, 0x0b, 0x1a, 0xc3, 0xa3, 0x97, 0xdd, 0x5a, 0x12, 0xfa, 0xe9, 0x7c, 0x38, 0xec, 0xd6, 0x0f,
	0xfe, 0x9d, 0x87, 0xe6, 0x50, 0x6e, 0x00, 0x39, 0x87, 0xd5, 0x92, 0x89, 0x92, 0x7b, 0xe9, 0x76,
	0x54, 0xfb, 0xae, 0x71, 0xff, 0xc6, 0xbc, 0xfe, 0x0c, 0xcf, 0x91, 0x33, 0x58, 0x2e, 0x1a, 0x28,
	0xc9, 0xfe, 0x54, 0x54, 0xb8, 0xb2, 0xb1, 0x5d, 0x9d, 0xcc, 0xc4, 0x4e, 0x01, 0x72, 0xe3, 0x24,
	0x5b, 0x85, 0xd3, 0xa7, 0x1d, 0xd6, 0x30, 0xaa, 0x52, 0x99, 0xcc, 0x11, 0xb4, 0xb3, 0x38, 0xe9,
	0xcf, 0x40, 0x53, 0x91, 0xad, 0x8a, 0x4c, 0xf1, 0x5e, 0x45, 0x87, 0xcb, 0xef, 0x55, 0x61, 0x9b,
	0xf9, 0xbd, 0xaa, 0x4c, 0x51, 0x89, 0x15, 0x5d, 0x2c, 0x17, 0xab, 0x30, 0xc1, 0x5c, 0xac, 0xd2,
	0xf8, 0xe6, 0xc8, 0x0b, 0x58, 0x99, 0xf2, 0x1a, 0xb2, 0x5d, 0xbc, 0x47, 0xd9, 0x33, 0x8c, 0xbb,
	0x37, 0x64, 0x33, 0xbd, 0x5f, 0xa0, 0x5b, 0x76, 0x0d, 0x92, 0x0d, 0xfe, 0x06, 0x27, 0x32, 0x76,
	0x6e, 0x06, 0xa4, 0xc2, 0x0f, 0x6b, 0x47, 0x7b, 0xb0, 0x65, 0x73, 0x6f, 0x20, 0xd0, 0x45, 0x9f,
	0x87, 0x0e, 0x1b, 0x33, 0x41, 0x5d, 0xcd, 0x3c, 0x5a, 0x52, 0x7b, 0xf9, 0x52, 0x2e, 0x79, 0x53,
	0xee, 0xfa, 0xa3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x13, 0xff, 0xbb, 0x4e, 0x27, 0x0b, 0x00,
	0x00,
}
